#common.py is need 
from __future__ import print_function

import numpy as np
import cv2
from common import anorm, getsize
from robomaster import robot



FLANN_INDEX_KDTREE = 1  # bug: flann enums are missing
FLANN_INDEX_LSH    = 6

def frame_capture():
    result = True
    while (result):
        img = ep_camera.read_cv2_image(strategy="newest", timeout=1)
        cv2.imwrite("NewPicture.jpg", img)
        result = False
def init_feature(name):
    chunks = name.split('-')
    if chunks[0] == 'sift':
        detector = cv2.xfeatures2d.SIFT_create()
        norm = cv2.NORM_L2
    elif chunks[0] == 'surf':
        detector = cv2.xfeatures2d.SURF_create(800)
        norm = cv2.NORM_L2
    elif chunks[0] == 'orb':
        detector = cv2.ORB_create(400)
        norm = cv2.NORM_HAMMING
    elif chunks[0] == 'akaze':
        detector = cv2.AKAZE_create()
        norm = cv2.NORM_HAMMING
    elif chunks[0] == 'brisk':
        detector = cv2.BRISK_create()
        norm = cv2.NORM_HAMMING
    else:
        return None, None
    if 'flann' in chunks:
        if norm == cv2.NORM_L2:
            flann_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
        else:
            flann_params= dict(algorithm = FLANN_INDEX_LSH,
                               table_number = 6, # 12
                               key_size = 12,     # 20
                               multi_probe_level = 1) #2
        matcher = cv2.FlannBasedMatcher(flann_params, {})
    else:
        matcher = cv2.BFMatcher(norm)
    return detector, matcher
def filter_matches(kp1, kp2, matches, ratio = 0.75):
    mkp1, mkp2 = [], []
    for m in matches:
        if len(m) == 2 and m[0].distance < m[1].distance * ratio:
            m = m[0]
            mkp1.append( kp1[m.queryIdx] )
            mkp2.append( kp2[m.trainIdx] )
    p1 = np.float32([kp.pt for kp in mkp1])
    p2 = np.float32([kp.pt for kp in mkp2])
    kp_pairs = zip(mkp1, mkp2)
    return p1, p2, list(kp_pairs)
def explore_match(win, img1, img2, kp_pairs, status = None, H = None):
    x2_list = []
    y2_list = []
    h1, w1 = img1.shape[:2]
    h2, w2 = img2.shape[:2]
    vis = np.zeros((max(h1, h2), w1+w2), np.uint8)
    vis[:h1, :w1] = img1
    vis[:h2, w1:w1+w2] = img2
    vis = cv2.cvtColor(vis, cv2.COLOR_GRAY2BGR)


    if status is None:
        status = np.ones(len(kp_pairs), np.bool_)
    p1, p2 = [], []  # python 2 / python 3 change of zip unpacking
    for kpp in kp_pairs:
        p1.append(np.int32(kpp[0].pt))
        p2.append(np.int32(np.array(kpp[1].pt) + [w1, 0]))

    green = (0, 255, 0)
    red = (0, 0, 255)
    white = (255, 255, 255)
    kp_color = (51, 103, 236)
    for (x1, y1), (x2, y2), inlier in zip(p1, p2, status):


        x2_list.append(x2)
        y2_list.append(y2)
        print('y2',y2_list)
        print('x2',x2_list)
    col2 =red
    thickness = 4
    print('y2v2', y2_list)
    print('x2v2', x2_list)
    max_x2 = max(x2_list)
    min_x2 = min(x2_list)
    max_y2 = max(y2_list)
    min_y2 = min(y2_list)

    print('max_x2',max_x2)
    print('min_x2',min_x2)
    print('max_y2',max_y2)
    print('min_y2', min_y2)
    middle_pointx=(max_x2 + min_x2)/2
    middle_pointy=(max_y2 + min_y2)/2
    middle_pointx=int(middle_pointx)
    middle_pointy=int(middle_pointy)

    Topright_corner = (min_x2, max_y2)
    Bottomright_corner = (min_x2, min_y2)
    Topleft_corner = (max_x2, max_y2)
    Bottomleft_corner = (max_x2, min_y2)
    middle_point = (middle_pointx,middle_pointy)
    cv2.line(vis, (Topright_corner), (Bottomright_corner), col2, thickness)
    cv2.line(vis, (Topright_corner), (Topleft_corner), col2, thickness)
    cv2.line(vis, (Topleft_corner), (Bottomleft_corner), col2, thickness)
    cv2.line(vis, (Bottomleft_corner), (Bottomright_corner), col2, thickness)
    cv2.circle(vis, (middle_pointx, middle_pointy), 4, red, -1)



    for (x1, y1), (x2, y2), inlier in zip(p1, p2, status):
        if inlier:
            col = green
            col2 = red
            thickness=1
            print('topright',Topright_corner)
            print('topleft',Topleft_corner)
            print('bottmright', Bottomleft_corner)
            print('bottomright',Bottomright_corner)

            cv2.circle(vis, (x1, y1), 2, col, -1)
            cv2.circle(vis, (x2, y2), 2, col, -1)
        else:
            col = red
            r = 2
            thickness = 3
            cv2.line(vis, (x1-r, y1-r), (x1+r, y1+r), col, thickness)

    vis0 = vis.copy()
    for (x1, y1), (x2, y2), inlier in zip(p1, p2, status):
        if inlier:
            cv2.line(vis, (x1, y1), (x2, y2), green)

    cv2.imshow(win, vis)

    def onmouse(event, x, y, flags, param):
        cur_vis = vis
        if flags & cv2.EVENT_FLAG_LBUTTON:
            cur_vis = vis0.copy()
            r = 8
            m = (anorm(np.array(p1) - (x, y)) < r) | (anorm(np.array(p2) - (x, y)) < r)
            idxs = np.where(m)[0]
            kp1s, kp2s = [], []
            for i in idxs:
                 (x1, y1), (x2, y2) = p1[i], p2[i]
                 col = (red, green)[status[i]]
                 cv2.line(cur_vis, (x1, y1), (x2, y2), col)
                 kp1, kp2 = kp_pairs[i]
                 kp1s.append(kp1)
                 kp2s.append(kp2)
            cur_vis = cv2.drawKeypoints(cur_vis, kp1s, None, flags=4, color=kp_color)
            cur_vis[:,w1:] = cv2.drawKeypoints(cur_vis[:,w1:], kp2s, None, flags=4, color=kp_color)

        cv2.imshow(win, cur_vis)
    cv2.setMouseCallback(win, onmouse)
    return vis
if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    print(__doc__)
    ep_vision = ep_robot.vision
    ep_camera = ep_robot.camera

    ep_camera.start_video_stream(display=False)

    while True:
        frame_capture()

        import sys, getopt
        opts, args = getopt.getopt(sys.argv[1:], '', ['feature='])
        opts = dict(opts)
        feature_name = opts.get('--feature', 'brisk')
        try:
            fn1, fn2 = args
        except:
            fn1 = 'D:/bottle_photo/bottle.png'
            fn2 = 'C:/Users/Joshua Lai/PycharmProjects/FYP/mk/sub code/detection/Homography/test_4/Newpicture.jpg'
        img1 = cv2.imread(fn1, 0)
        img2 = cv2.imread(fn2, 0)
        detector, matcher = init_feature(feature_name)

        if img1 is None:
            print('Failed to load fn1:', fn1)
            sys.exit(1)

        if img2 is None:
            print('Failed to load fn2:', fn2)
            sys.exit(1)

        if detector is None:
            print('unknown feature:', feature_name)
            sys.exit(1)

        print('using', feature_name)

        kp1, desc1 = detector.detectAndCompute(img1, None)
        kp2, desc2 = detector.detectAndCompute(img2, None)
        print('img1 - %d features, img2 - %d features' % (len(kp1), len(kp2)))

        def match_and_draw(win):
            print('matching...')
            raw_matches = matcher.knnMatch(desc1, trainDescriptors = desc2, k = 2) #2
            p1, p2, kp_pairs = filter_matches(kp1, kp2, raw_matches)
            if len(p1) >= 4:
                H, status = cv2.findHomography(p1, p2, cv2.RANSAC, 5.0)
                print('%d / %d  inliers/matched' % (np.sum(status), len(status)))
            else:
                H, status = None, None
                print('%d matches found, not enough for homography estimation' % len(p1))

            vis = explore_match(win, img1, img2, kp_pairs, status, H)

        match_and_draw('find_obj')
        cv2.waitKey(0)
    cv2.destroyAllWindows()
